#!/usr/bin/env python3
"""
Setup script for Graph Database Visualizer
Creates .env file with necessary configuration
"""

import os
import sys

def create_env_file():
    """Create .env file with configuration template"""
    
    env_template = """# Environment Variables for Graph Database Visualization
# Fill in your actual values below

# Azure Cosmos DB Gremlin API Configuration
COSMOS_KEY=your_actual_cosmos_key_here
COSMOS_ENDPOINT=wss://aida-graph-db.gremlin.cosmos.azure.com:443
COSMOS_DATABASE=cgGraph
COSMOS_CONTAINER=cityClerk
COSMOS_PARTITION_KEY=partitionKey
COSMOS_PARTITION_VALUE=demo
"""
    
    env_file_path = ".env"
    
    # Check if .env already exists
    if os.path.exists(env_file_path):
        print(f"üìÑ .env file already exists at {env_file_path}")
        response = input("Do you want to overwrite it? (y/n): ").lower().strip()
        if response != 'y':
            print("‚ùå Setup cancelled.")
            return False
    
    # Create .env file
    try:
        with open(env_file_path, 'w') as f:
            f.write(env_template)
        print(f"‚úÖ Created .env file at {env_file_path}")
        print("\nüîß Next steps:")
        print("1. Open the .env file in a text editor")
        print("2. Replace 'your_actual_cosmos_key_here' with your actual Azure Cosmos DB key")
        print("3. Update other values if they differ from your setup")
        print("4. Save the file")
        print("5. Run: python3 graph_visualizer.py")
        return True
        
    except Exception as e:
        print(f"‚ùå Error creating .env file: {e}")
        return False

def get_cosmos_key_from_user():
    """Interactive setup to get Cosmos DB key from user"""
    print("üîß Interactive Setup")
    print("=" * 50)
    
    # Get Cosmos DB key
    cosmos_key = input("Enter your Azure Cosmos DB key: ").strip()
    if not cosmos_key:
        print("‚ùå Cosmos DB key is required!")
        return None
    
    # Get other optional values
    endpoint = input("Enter Cosmos DB endpoint (press Enter for default): ").strip()
    if not endpoint:
        endpoint = "wss://aida-graph-db.gremlin.cosmos.azure.com:443"
    
    database = input("Enter database name (press Enter for 'cgGraph'): ").strip()
    if not database:
        database = "cgGraph"
    
    container = input("Enter container name (press Enter for 'cityClerk'): ").strip()
    if not container:
        container = "cityClerk"
    
    # Create .env content
    env_content = f"""# Environment Variables for Graph Database Visualization
# Generated by setup script

# Azure Cosmos DB Gremlin API Configuration
COSMOS_KEY={cosmos_key}
COSMOS_ENDPOINT={endpoint}
COSMOS_DATABASE={database}
COSMOS_CONTAINER={container}
COSMOS_PARTITION_KEY=partitionKey
COSMOS_PARTITION_VALUE=demo
"""
    
    # Write to .env file
    try:
        with open(".env", 'w') as f:
            f.write(env_content)
        print("\n‚úÖ .env file created successfully!")
        return True
    except Exception as e:
        print(f"‚ùå Error creating .env file: {e}")
        return False

def main():
    print("üöÄ Graph Database Visualizer Setup")
    print("=" * 40)
    
    print("\nChoose setup method:")
    print("1. Create template .env file (you edit manually)")
    print("2. Interactive setup (guided configuration)")
    print("3. Check existing configuration")
    
    choice = input("\nEnter your choice (1-3): ").strip()
    
    if choice == "1":
        create_env_file()
    elif choice == "2":
        get_cosmos_key_from_user()
    elif choice == "3":
        # Check configuration
        if os.path.exists(".env"):
            print("‚úÖ .env file exists")
            # Try to validate
            try:
                from config import validate_config
                if validate_config():
                    print("‚úÖ Configuration is valid!")
                    print("You can now run: python3 graph_visualizer.py")
                else:
                    print("‚ùå Configuration has missing values")
            except Exception as e:
                print(f"‚ö†Ô∏è Error validating config: {e}")
        else:
            print("‚ùå .env file not found")
            print("Run this script again and choose option 1 or 2")
    else:
        print("‚ùå Invalid choice")
        return
    
    print("\nüìö For more help, check the README or run:")
    print("   python3 config.py")

if __name__ == "__main__":
    main() 